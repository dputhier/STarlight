---
format: html
params:
  rds: "RDS_PATH"
fig-dpi: 300
knitr:
  opts_chunk:
    out.width: "100%"
---

```{r}
#| label: start
#| include: false
#| echo: false
#| eval: true

STarlight::set_verb_level(0)
library(knitr)
options(width=400)

knitr::opts_chunk$set(
  fig.path="FIG_PATH",
  fig.align = "center", 
  size = "tiny", 
  comment = ""
)

```

```{r}
#| label: setparams
#| include: false
#| echo: false
#| eval: true

rds <- readRDS(params$rds)
this_params <- list()
this_params$st_grid <- rds$st_grid
this_params$sample_name <- rds$sample_name
this_params$title <- rds$title
this_params$subtitle <- rds$subtitle
this_params$date <- rds$date
this_params$experimenters <- rds$experimenters
this_params$sample_info <- rds$sample_info
this_params$image_height <- rds$image_height
this_params$corrplot_text_size <- rds$corrplot_text_size
this_params$hc_tree_params <- rds$hc_tree_params
this_params$fig_path <- rds$fig_path
this_params$spatial_image_params <- rds$spatial_image_params
this_params$cmp_counts_st_params <- rds$cmp_counts_st_params
this_params$plot_rip_k_params <- rds$plot_rip_k_params
spatial_image_params <- this_params$spatial_image
params_hc <- this_params$hc_tree_params
cmp_counts_st_params <- this_params$cmp_counts_st_params
st_grid <- this_params$st_grid
fig_h <- round(STarlight::nb_feat(st_grid)/7, 0) + 2
```





# Sample `{r} this_params$sample_name`

## Miscellaneous 

::: {.panel-tabset}

### experimenters

```{r}
#| label: experimenters
#| echo: false
#| eval: true
author_df <- as.data.frame(do.call("rbind", this_params$experimenters))
knitr::kable(author_df) %>% kableExtra::row_spec(1, bold = TRUE) %>% 
  kableExtra::kable_styling(full_width = FALSE, position = "left")
```


### Sample information  


```{r sample}
#| label: sample
#| echo: false
#| eval: true

sample_info <- as.data.frame(do.call("rbind", list(this_params$sample_info)))
knitr::kable(sample_info) %>% kableExtra::row_spec(1, bold = TRUE) %>% 
  kableExtra::kable_styling(full_width = FALSE, position = "left")
```

### Parameters  


```{r}
#| label: parameters
#| echo: false
#| eval: true

t1 <- rbind(c("Date: ", this_params$date),
            c("Nb of modules: ", this_params$hc_tree_params$nb_class),
            c("Image height: ", this_params$image_height)
            )

knitr::kable(t1) %>% kableExtra::column_spec(1, bold = TRUE)
```

### Object information 

```{r}
#| label: information
#| echo: false
#| eval: true
t1 <- rbind(c("type:", class(st_grid)),
            c("Nb_feature:", STarlight::nb_feat(st_grid)),
            c("Number of counts:", STarlight::nb_items(st_grid)),
            c("Bin size:", STarlight::bin_size(st_grid)),
            c("Number of bins (x axis):", STarlight::nbin_x(st_grid)),
            c("Number of bins (y axis):", STarlight::nbin_y(st_grid))
            )

t2 <- rbind(c("Min value (x axis):", st_grid@x_min),
            c("Max value (x axis):", st_grid@x_max),
            c("Min value (y axis):", st_grid@y_min),
            c("Max value (y axis):", st_grid@y_max))

knitr::kable(t1) %>% kableExtra::column_spec(1, bold = TRUE) %>% 
  kableExtra::kable_styling(full_width = FALSE, position = "float_left")
knitr::kable(t2) %>% kableExtra::column_spec(1, bold = TRUE) %>% 
  kableExtra::kable_styling(full_width = FALSE, position = "left")
```

:::


## Feature counts

::: {.panel-tabset}

### Count table

```{r}
#| label: count_table
#| echo: false
#| eval: true
counts <- as.data.frame(STarlight::table_st(st_grid))
colnames(counts) <- c("Feature", "Counts")
DT::datatable(as.data.frame(counts))
```

### Count barplot

```{r}
#| label: cmp_counts_st
#| echo: false
#| eval: true
#| fig-height: !expr 'round(fig_h, 0)' 
#| fig-width: 7

fig_h <- ifelse(fig_h < 1, 1.5, fig_h)
this_params$cmp_counts_st_params$st_grid <- st_grid
this_params$cmp_counts_st_params$features <- STarlight::feat_names(st_grid)

do.call(eval(parse(text="STarlight::cmp_counts_st")), 
        this_params$cmp_counts_st_params) + ggplot2::coord_flip()

```
:::


## Feature spatial density {.panelset}

::: {.panel-tabset}

### Moran's Index

```{r}
#| label: moran_i
#| echo: false
#| eval: true
#| fig-height: 5
#| fig-width: 7

STarlight::set_verb_level(0)
st_grid <- STarlight::compute_moran_index(st_grid)
STarlight::plot_moran_i(st_grid)
```

### K function

This section contains the result of K Ripley's function to evaluate molecule density. 

```{r}
#| label: ripley
#| echo: false
#| eval: true

STarlight::set_verb_level(0)
st_grid <- STarlight::compute_k_ripley(st_grid, verbose=FALSE)
this_params$plot_rip_k_params$object <- st_grid
do.call(eval(parse(text="STarlight::plot_rip_k")), 
        this_params$plot_rip_k_params) 
```

```{r}
#| label: ripley_by_gene
#| echo: false
#| eval: true
#| fig-height: !expr 'round(length(STarlight::feat_names(st_grid))/this_params$plot_rip_k_params$ncol, 0) * 1.5 + 1'
#| fig-width: 5

this_params$plot_rip_k_params$feature <- STarlight::feat_names(st_grid)
do.call(eval(parse(text="STarlight::plot_rip_k")), 
        this_params$plot_rip_k_params) 
```

### L function

This section contains the result of the normalized K Ripley's function (L) to evaluate molecule density.

```{r}
#| label: ripley_l
#| echo: false
#| eval: true

STarlight::set_verb_level(0)
st_grid <- STarlight::compute_k_ripley(st_grid, 
                                       method="L", verbose=FALSE)
this_params$plot_rip_k_params$object <- st_grid
this_params$plot_rip_k_params$feature <- NULL
do.call(eval(parse(text="STarlight::plot_rip_k")), 
        this_params$plot_rip_k_params) 

```

```{r}
#| label: ripley_l_by_gene
#| echo: false
#| eval: true
#| fig-height: !expr 'round(length(STarlight::feat_names(st_grid))/this_params$plot_rip_k_params$ncol, 0) * 1.5 + 1'
#| fig-width: 7

this_params$plot_rip_k_params$object <- st_grid
this_params$plot_rip_k_params$feature <- STarlight::feat_names(st_grid)
do.call(eval(parse(text="STarlight::plot_rip_k")), 
        this_params$plot_rip_k_params) 
```

:::


## Feature correlations 

::: {.panel-tabset}

```{r}
#| label: prepare_hc
#| echo: false
#| eval: true

this_params$hc_tree_params$object <- st_grid
this_params$hc_tree_params$return_list <- TRUE
hc <- do.call(eval(parse(text="STarlight::hc_tree")),
              this_params$hc_tree_params)

cor_mat <- hc$cor_mat[hc$hc_clust$order, hc$hc_clust$order]
```

### Correlations

```{r}
#| label: corrplot
#| echo: false
#| eval: true

corrplot::corrplot(cor_mat, type="upper", order="original",
                   col=RColorBrewer::brewer.pal(n=8, name="RdYlBu"),
                   tl.cex=params$corrplot_text_size, diag = FALSE)
```

### Tree

```{r}
#| label: display_tree
#| echo: false
#| eval: true
print(hc$p + Seurat::NoLegend()) 
```




### Modules

```{r}
#| label: modules
#| echo: false
#| eval: true

st_grid <- STarlight::compute_module_score(st_grid, 
                                          modules = hc$tree_classes)
mn <- STarlight::meta_names(st_grid)


this_params$spatial_image_params$features <- mn[grep("MOD[0-9]+", mn, perl = TRUE)]
this_params$spatial_image_params$object <- st_grid

do.call(eval(parse(text="STarlight::spatial_image")), 
        this_params$spatial_image_params) + ggplot2::coord_fixed()

```

::: 

## Spatial distribution {.panelset}

::: {.panel-tabset}


### Rasterized images of features

::: {layout-valign="top"}
```{r}
#| label: Rasterized_images_of_features
#| echo: false
#| eval: true
#| fig-align: center
#| fig-pos: top
#| fig-width: 4.5
#| fig-height: !expr '((st_grid@y_max - st_grid@y_min)  * 10) / ((st_grid@x_max - st_grid@x_min) * 4) * 4.5 * this_params$image_height + 1' 

this_params$spatial_image_params$object <- st_grid
this_params$spatial_image_params$features <- STarlight::feat_names(st_grid)
do.call(eval(parse(text="STarlight::spatial_image")), 
        this_params$spatial_image_params) + ggplot2::coord_fixed()

```
:::

### Spatial distribution of counts

::: {layout-valign="top"}
```{r Spatial_distribution_of_counts}
#| label: Spatial_distribution_of_counts
#| echo: false
#| eval: true
#| fig-width: 2
#| fig-height: 2
#| fig-align: center

STarlight::spatial_image(object = st_grid, 
          features = "count_sum") + ggplot2::coord_fixed()
```
:::


:::



